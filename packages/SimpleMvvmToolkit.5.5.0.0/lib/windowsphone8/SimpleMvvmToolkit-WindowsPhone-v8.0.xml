<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleMvvmToolkit-WindowsPhone-v8.0</name>
    </assembly>
    <members>
        <member name="T:SimpleMvvmToolkit.MessageBus">
            <summary>
            Facilitates communication among view-models.
            To prevent memory leaks weak references are used.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.MessageBus.Default">
            <summary>
            Singleton of MessageBus.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.UIDispatcher">
            <summary>
            Helper class for dispatching work across threads.
            WPF apps should call Initialize from the UI thread in App_Start.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.UIDispatcher.CheckAccess">
            <summary>
            Determines whether the calling thread is the thread associated with this Dispatcher.
            </summary>
            <returns>
            true if the calling thread is the thread associated with this UIDispatcher; otherwise, false.
            </returns>
        </member>
        <member name="M:SimpleMvvmToolkit.UIDispatcher.BeginInvoke(System.Action)">
            <summary>
            Executes the specified delegate asynchronously with the specified array of arguments on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">A delegate to a method that takes multiple arguments, which is pushed onto the Dispatcher event queue.</param>
        </member>
        <member name="M:SimpleMvvmToolkit.UIDispatcher.Execute(System.Action)">
            <summary>
            Execute an action on the UI thread.
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:SimpleMvvmToolkit.UIDispatcher.Current">
            <summary>
            Obtain the current dispatcher for cross-thread marshaling
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.ViewModelDetailBase`2">
            <summary>
            Base class for detail view-models. Also provides support for IEditableDataObject.
            </summary>
            <typeparam name="TViewModel">Class inheriting from ViewModelBase</typeparam>
            <typeparam name="TModel">Detail entity type</typeparam>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.#ctor">
            <summary>
            Protected constructor for ViewModelDetailBase.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.ViewModelDetailBase`2.Model">
            <summary>
            Detail entity
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.ViewModelDetailBase`2.IsValid">
            <summary>
            Returns true if there are no validation errors.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.ViewModelExtensions">
            <summary>
            Base class for view models
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelExtensions.IsInDesignMode``1(SimpleMvvmToolkit.ViewModelBase{``0})">
            <summary>
            Allows you to provide data at design-time (Blendability)
            </summary>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingListener">
            <summary>
            Helper class for adding Bindings to non-FrameworkElements
            </summary>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingListener.#ctor(System.Object,Expression.Samples.Interactivity.DataHelpers.BindingListener.ChangedHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="context">Context</param>
            <param name="changedHandler">Callback whenever the value of this binding has changed.</param>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingListener.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Context">
            <summary>
            Context.
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Binding">
            <summary>
            The Binding which is to be evaluated
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Element">
            <summary>
            The element to be used as the context on which to evaluate the binding.
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Value">
            <summary>
            The current value of this binding.
            </summary>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingListener.ChangedHandler">
            <summary>
            Delegate for when the binding listener has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs">
            <summary>
            Event args for when binding values change.
            </summary>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs.#ctor(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs.EventArgs">
            <summary>
            Original event args.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.EventToCommand">
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction"/> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand"/>.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
        </member>
        <member name="F:SimpleMvvmToolkit.EventToCommand.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:SimpleMvvmToolkit.EventToCommand.CommandParameter"/> dependency property
            </summary>
        </member>
        <member name="F:SimpleMvvmToolkit.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:SimpleMvvmToolkit.EventToCommand.Command"/> dependency property
            </summary>
        </member>
        <member name="F:SimpleMvvmToolkit.EventToCommand.MustToggleIsEnabledProperty">
            <summary>
            Identifies the <see cref="P:SimpleMvvmToolkit.EventToCommand.MustToggleIsEnabled"/> dependency property
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.EventToCommand.OnAttached">
            <summary>
            Called when this trigger is attached to a FrameworkElement.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.EventToCommand.GetCommand">
            <summary>
            This method is here for compatibility
            with the Silverlight 3 version.
            </summary>
            <returns>The command that must be executed when
            this trigger is invoked.</returns>
        </member>
        <member name="M:SimpleMvvmToolkit.EventToCommand.Invoke">
            <summary>
            Provides a simple way to invoke this trigger programatically
            without any EventArgs.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.EventToCommand.Invoke(System.Object)">
            <summary>
            Executes the trigger.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
            <param name="parameter">The EventArgs of the fired event.</param>
        </member>
        <member name="P:SimpleMvvmToolkit.EventToCommand.Command">
            <summary>
            Gets or sets the ICommand that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.EventToCommand.CommandParameter">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:SimpleMvvmToolkit.EventToCommand.Command"/>
            attached to this trigger. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.EventToCommand.CommandParameterValue">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:SimpleMvvmToolkit.EventToCommand.Command"/>
            attached to this trigger. This property is here for compatibility
            with the Silverlight version. This is NOT a DependencyProperty.
            For databinding, use the <see cref="P:SimpleMvvmToolkit.EventToCommand.CommandParameter"/> property.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.EventToCommand.MustToggleIsEnabled">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:SimpleMvvmToolkit.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. If this property
            is false, the element will not be disabled when the command's
            CanExecute method changes. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.EventToCommand.MustToggleIsEnabledValue">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:SimpleMvvmToolkit.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. This property is here for
            compatibility with the Silverlight version. This is NOT a DependencyProperty.
            For databinding, use the <see cref="P:SimpleMvvmToolkit.EventToCommand.MustToggleIsEnabled"/> property.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.EventToCommand.PassEventArgsToCommand">
            <summary>
            Specifies whether the EventArgs of the event that triggered this
            action should be passed to the bound RelayCommand. If this is true,
            the command should accept arguments of the corresponding
            type (for example RelayCommand&lt;MouseButtonEventArgs&gt;).
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.INavigator">
            <summary>
            Interface for navigation.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.INavigator.NavigateTo(System.String)">
            <summary>
            Navigate to specified page.
            </summary>
            <param name="pageName">Name of page to navigate to</param>
        </member>
        <member name="T:SimpleMvvmToolkit.ModelBase`1">
            <summary>
            Provides support to entities for two-way data binding by
            implementing INotifyPropertyChanged with a lambda expression.
            </summary>
            <typeparam name="TModel">Class inheriting from ModelBase</typeparam>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelBase`1.#ctor">
            <summary>
            Public ctor required for serialization.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelBase`1.GetErrors(System.String)">
            <summary>
            Enumeration for sequence of errors.
            </summary>
            <param name="propertyName">Property name</param>
            <returns>Sequence of errors.</returns>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelBase`1.ValidateProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Func{``0,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Allows you to specify a lambda for property validation
            </summary>
            <typeparam name="TResult">Property type</typeparam>
            <param name="property">Property for validation</param>
            <param name="value">Value being validated</param>
            <param name="validator">Delegate returning error messages if property is invalid</param>
        </member>
        <member name="E:SimpleMvvmToolkit.ModelBase`1.ErrorsChanged">
            <summary>
            Notification that error list has changed.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.ModelBase`1.HasErrors">
            <summary>
            Returns true if errors list is not empty.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.Navigator">
            <summary>
            Handles page navigation.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.Navigator.NavigateTo(System.String)">
            <summary>
            Navigate to specified page.
            </summary>
            <param name="pageName">Name of page to navigate to</param>
        </member>
        <member name="T:SimpleMvvmToolkit.ViewModelBase`1">
            <summary>
            Base class for non-detail view-models
            </summary>
            <typeparam name="TViewModel">Class inheriting from ViewModelBase</typeparam>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.#ctor">
            <summary>
            Protected constructor for ViewModelBase.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.GetErrors(System.String)">
            <summary>
            Enumeration for sequence of errors.
            </summary>
            <param name="propertyName">Property name</param>
            <returns>Sequence of errors.</returns>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.ValidateProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Func{``0,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Allows you to specify a lambda for property validation
            </summary>
            <typeparam name="TResult">Property type</typeparam>
            <param name="property">Property for validation</param>
            <param name="value">Value being validated</param>
            <param name="validator">Delegate returning error messages if property is invalid</param>
        </member>
        <member name="E:SimpleMvvmToolkit.ViewModelBase`1.ErrorsChanged">
            <summary>
            Notification that errors have changed.
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.ViewModelBase`1.HasErrors">
            <summary>
            Returns true if errors list is not empty.
            </summary>
        </member>
    </members>
</doc>
